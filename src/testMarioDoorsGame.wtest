import wollok.game.*
import personajes.*
import tablero.*
import direcciones.*
import habilidades.*
import torreDePuertas.*

describe "Movilidad de Mario o Luigi" {

	method initialize() {
		game.clear()
		tablero.setearEntorno()
	}

	test "Spawn" {
		//Posicion inicial de mario
		assert.equals(mario.position().x(), 0)
	}

	test "Mario se mueve a la derecha" {
		mario.mover(derecha)
		assert.equals(mario.position().x(), 1)
	}

	test "Mario se mueve a la izquierda" {
		// Por Spawn, el personaje aparece a la izquierda del tablero, por lo que se mueve
		// a la derecha 2 veces, para verificar posicion y luego moverlo una posicion a la izquierda
		mario.mover(derecha)
		mario.mover(derecha)
		assert.equals(mario.position().x(), 2)
		//
		mario.mover(izquierda)
		assert.equals(mario.position().x(), 1)
	}

}

describe "Luigi tira poderes a Mario" {

	method initialize() {
		game.clear()
		tablero.setearEntorno()
	}

	method agregarHabilidadTablero(habilidad) {
		if (not game.hasVisual(habilidad)) {
			habilidad.mostrar()
		}
	}

	test "Luigi aplica habilidad cambiadorDeTeclas" {
		self.agregarHabilidadTablero(cambiadorDeTeclas)
		// Por Spawn, el personaje aparece a la izquierda del tablero, por lo que se mueve
		// a la derecha 2 veces, para verificar posicion y luego moverlo una posicion a la izquierda
		mario.mover(derecha)
		mario.mover(derecha)
		assert.equals(mario.position().x(), 2)
		// Luigi acciona habilidad
		luigi.habilidad(cambiadorDeTeclas)
		luigi.accionarHabilidad()
		// Mario se mueve a la "izquierda"
		mario.mover(derecha)
		mario.mover(derecha)
		// Se verifica que la habilidad funciona
		assert.equals(mario.position().x(), 0)
	}

	test "Luigi aplica habilidad freezearAlOponente" {
		self.agregarHabilidadTablero(freezearAlOponente)
		// Por Spawn, el personaje aparece a la izquierda del tablero, por lo que se mueve
		// a la derecha 2 veces, para verificar posicion y luego moverlo una posicion a la izquierda
		mario.mover(derecha)
		mario.mover(derecha)
		assert.equals(mario.position().x(), 2)
		// Luigi acciona habilidad
		luigi.habilidad(freezearAlOponente)
		luigi.accionarHabilidad()
		// Mario se mueve a la derecha, pero su posicion no debe cambiar
		mario.mover(derecha)
		mario.mover(derecha)
		// Se verifica que la habilidad funciona
		assert.equals(mario.position().x(), 2)
	}

	test "Mario aplica habilidad aumentarVelocidad" {
		self.agregarHabilidadTablero(aumentarVelocidad)
		// Mario acciona habilidad
		mario.habilidad(aumentarVelocidad)
		mario.accionarHabilidad()
		mario.mover(derecha)
		// Se verifica que la habilidad funciona
		assert.equals(mario.position().x(), 2)
	}

}

